generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  createdBy    String?
  owner        User?         @relation("RoomOwner", fields: [createdBy], references: [id])
  participants RoomUser[]
  history      RoomHistory[] // ðŸ‘ˆ Added relation back
}

model User {
  id         String        @id @default(cuid())
  username   String        @unique
  email      String        @unique
  password   String
  createdAt  DateTime      @default(now())
  lastSeen   DateTime      @default(now()) @updatedAt
  ownedRooms Room[]        @relation("RoomOwner")
  roomUsers  RoomUser[]
  history    RoomHistory[]
}

model RoomUser {
  id       String    @id @default(cuid())
  roomId   String
  userId   String?
  joinedAt DateTime  @default(now())
  lastSeen DateTime  @default(now()) @updatedAt
  isActive Boolean   @default(true)
  leftAt   DateTime?
  room     Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
}

model RoomHistory {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  event     String
  payload   String?
  timestamp DateTime  @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
}
